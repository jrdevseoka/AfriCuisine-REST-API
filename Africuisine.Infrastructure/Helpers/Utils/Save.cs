using Africuisine.Application.Interfaces.Utils;
using Africuisine.Domain.Models;
using Africuisine.Domain.Models.User;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Africuisine.Infrastructure.Helpers.Utils
{
    public class Save : ISave
    {
        public void GenerateBaseModelData(IEnumerable<EntityEntry> entries, CancellationToken cancellationToken = default)
        {
            cancellationToken.ThrowIfCancellationRequested();
            foreach(var entry in entries)
            {
                var modelBaseType = typeof(DataModelBase);
                var entryType =  entry.Entity.GetType();

                if(modelBaseType.IsAssignableFrom(entryType))
                {
                    var model = (DataModelBase)entry.Entity;
                    AutoGenerateDataModelBaseData(entry.State, model);
                }
            }
        }
        private static object GetEntityType(object entry)
        {
            return entry switch
            {
                UserDM model => model,
                RoleClaimDM roleClaim => roleClaim,
                RoleDM role => role,
                UserClaimDM claim => claim,
                UserLoginDM userLogin => userLogin,
                UserTokenDM userToken => userToken,
                UserRoleDM userRole => userRole,
                _ => entry,
            };
        }
        private static void AutoGenerateDataModelBaseData(
            EntityState entryState,
            DataModelBase model
        )
        {
            if (entryState == EntityState.Added)
            {
                model.Creation = DateTime.Now;
                model.LastUpdate = DateTime.Now;
                model.SeqNo = 0;
            }
            if (entryState == EntityState.Modified)
            {
                model.LastUpdate = DateTime.Now;
                model.SeqNo++;
            }
        }
    }
}