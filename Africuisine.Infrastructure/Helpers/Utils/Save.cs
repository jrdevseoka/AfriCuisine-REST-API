using Africuisine.Domain.Models;
using Africuisine.Domain.Models.User;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Africuisine.Infrastructure.Helpers.Utils
{
    public class Save : ISave
    {
        public int GenerateBaseModelData(IEnumerable<EntityEntry> entries, CancellationToken cancellationToken = default)
        {
            cancellationToken.ThrowIfCancellationRequested();
            foreach(var entry in entries)
            {
                var entity = GetEntityType(entry);
                if(entity is DataModelBase model)
                {
                    AutoGenerateDataModelBaseData(entry.State, model);
                }
            }
            return 0;
        }
        private static object GetEntityType(object entry)
        {
            switch (entry)
            {
                case UserDM user:
                    return user;
                case RoleClaimDM roleClaim:
                    return roleClaim;
                case RoleDM role:
                    return role;
                case UserClaimDM claim:
                    return claim;
                case UserLoginDM userLogin:
                    return userLogin;
                case UserTokenDM userToken:
                    return userToken;
                case UserRoleDM userRole:
                    return userRole;
                default:
                    return (DataModelBase)entry;
            }
        }
        private static void AutoGenerateDataModelBaseData(
            EntityState entryState,
            DataModelBase user
        )
        {
            if (entryState == EntityState.Added)
            {
                user.Creation = DateTime.Now;
                user.LastUpdate = DateTime.Now;
                user.SeqNo = 0;
            }
            if (entryState == EntityState.Modified)
            {
                user.LastUpdate = DateTime.Now;
                user.SeqNo++;
            }
        }
    }
}